
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // 📁 Users Collection
    match /users/{userIdInPath} {

      // ✅ Read: user can read their own data OR if requester is admin
      allow read: if request.auth != null &&
        (
          request.auth.uid == userIdInPath ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
        );

      // ✅ Update:
      // - User can update their own document (except isAdmin)
      // - Admins can only update tokenBalance field
      allow update: if request.auth != null &&
        (
          (
            request.auth.uid == userIdInPath &&
            !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin'])
          ) ||
          (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tokenBalance'])
          )
        );

      // ✅ Create: user can create their own doc (isAdmin must not be true)
      allow create: if request.auth != null &&
        request.auth.uid == userIdInPath &&
        (
          request.resource.data.isAdmin == null ||
          request.resource.data.isAdmin == false
        );

      // ✅ List: only admins can list users
      allow list: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // ✅ Delete: only the user can delete their own document
      allow delete: if request.auth != null &&
        request.auth.uid == userIdInPath;
    }

    // 📁 Submissions Collection
    match /submissions/{submissionId} {

      // ✅ Read: owner of submission OR admin
      allow read: if request.auth != null &&
        (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
        );

      // ✅ Update: only admins can update
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // ✅ Create: user can create their own submissions
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;

      // ✅ Delete: owner OR admin can delete
      allow delete: if request.auth != null &&
        (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
        );

      // ✅ List: only admins can list submissions
      allow list: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // 📁 Redemption Requests Collection
    match /redemptionRequests/{requestId} {

      // ✅ Read, List, Update, Delete: only admins can manage requests
      allow read, update, delete, list: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // ✅ Create: user can create their own redemption request
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
    }
  }
}
