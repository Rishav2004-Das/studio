
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // 📁 Users Collection
    match /users/{userIdInPath} {

      // ✅ Read & List: Allow public read/list for leaderboards.
      // Anyone can see user profiles, but sensitive data shouldn't be stored here.
      allow get, list: if true;

      // ✅ Update:
      // - User can update their own document (except isAdmin)
      // - Admins can only update tokenBalance field
      allow update: if request.auth != null &&
        (
          (
            request.auth.uid == userIdInPath &&
            !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin'])
          ) ||
          (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tokenBalance'])
          )
        );

      // ✅ Create: user can create their own doc (isAdmin must not be true)
      allow create: if request.auth != null &&
        request.auth.uid == userIdInPath &&
        (
          request.resource.data.isAdmin == null ||
          request.resource.data.isAdmin == false
        );

      // ✅ Delete: only the user can delete their own document
      allow delete: if request.auth != null &&
        request.auth.uid == userIdInPath;
    }

    // 📁 Submissions Collection
    match /submissions/{submissionId} {

      // ✅ Read & List: Allow public read/list for the main feed
      allow get, list: if true;
      
      // ✅ Update: 
      // - Admins can update any field (for review)
      // - Any authenticated user can update ONLY the 'likes' and 'likers' fields
      allow update: if request.auth != null &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likers'])
        );

      // ✅ Create: user can create their own submissions
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;

      // ✅ Delete: owner OR admin can delete
      allow delete: if request.auth != null &&
        (
          resource.data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
        );

      // 💬 Comments Subcollection
      match /comments/{commentId} {
        // ✅ Read: Anyone can read comments
        allow get, list: if true;
        // ✅ Create: Any authenticated user can create a comment
        allow create: if request.auth != null;
        // ❌ Update, Delete: Not allowed for now
        allow update, delete: if false;
      }
    }

    // 📁 Redemption Requests Collection
    match /redemptionRequests/{redemptionId} {
      // ✅ Read, List, Update, Delete: ONLY admins
      allow read, list, update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        
      // ✅ Create: user can create their own redemption request
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
    }

    // 📁 Announcements Collection
    match /announcements/{announcementId} {
      // ✅ Read: Anyone can read announcements
      allow get, list: if true;

      // ✅ Create, Update, Delete: ONLY admins
      allow create, update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
